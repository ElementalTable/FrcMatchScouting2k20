install.packages("ggplot2")
install.packages("devtools")
install.packages("plyr")
install.packages("htmlwidgets")
install.packages("plotly")
install.packages("cmna")
install.packages("ggplot2")
install.packages("devtools")
install.packages("plyr")
install.packages("cmna")
install.packages("ggplot2")
install.packages("devtools")
install.packages("plyr")
install.packages("devtools")
install.packages("plyr")
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(shiny)
library(shiny)
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp('~/HDWDashboard')
source('~/HDWDashboard/Packages/install.R', echo=TRUE)
source('~/HDWDashboard/Packages/install.R', echo=TRUE)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
scaffoldWidget("C3StackedChart")
runApp('~/HDWDashboard')
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Controls", tabName = 'controls', icon = icon('sliders-h')),
menuItem("Graphs", tabName = 'graphs', icon = icon('chart-area')),
sliderInput("bins","Number of bins", min = 1, max = 100, value = 50),
dateRangeInput("dates",h3("Date Range"), min = min(over_time_complete$Date), max = max(over_time_complete$Date),start = min(over_time_complete$Date), end = max(over_time_complete$Date))
)
)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
shiny::runApp()
runApp()
source('~/HDWDashboard/Packages/install.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(C3)
runApp()
devtools::install()
devtools::install(C3)
setwd("C3")
devtools::install(C3)
devtools::install()
library(C3)
runApp('~/HDWDashboard')
scaffoldWidget("C3ChartProxy", edit=FALSE)
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
dataset <- data.frame(
Time  = start_date + 1:n ,
data1 = getSeries(n = n, drift = 0.3, walk = 3, scale = 30),
data2 = getSeries(n = n, drift = 0.1, walk = 4, scale = 20),
data3 = getSeries(n = n, drift = 0.2, walk = 3, scale = 30))
install.packages("bundesbank")
install.packages("bundesbank")
library(bundesbank)
runApp('~/HDWDashboard')
nrom
?Random
?rnom
?nrom
?rnomr
?rnorm
runApp('~/HDWDashboard')
runApp()
runApp('~/HDWDashboard')
runApp()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp()
runApp('~/HDWDashboard')
devtools::install()
remove(C3ChartProxy())
remove(C3ChartProxy)
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp()
runApp('~/HDWDashboard')
devtools::install()
library(C3)
devtools::install()
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
output$chart1 <- renderC3StackedAreaChart({
C3StackedAreaChart(dataset = dataset1,
colors = list(data1 = "purple", data2="blue", data3 = "grey"),
types = list(data1 = "bar", data2 = "bar", data3 = "bar"),
groups = c("data1","data2","data3"))
})
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
runApp('~/HDWDashboard')
library(C3)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp()
runApp('~/HDWDashboard')
?try
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
geterrmessage()
geterrmessage()
runApp('~/HDWDashboard')
geterrmessage()
?div
runApp('~/HDWDashboard')
geterrmessage()
try(
C3ChartProxy("newChart") %>% zoomChart("2016-10-05","2016-10-15")
)
observeEvent(input$update1, {
try(
C3ChartProxy("newChart") %>% zoomChart("2016-10-05","2016-10-15")
)
})
geterrmessage()
runApp('~/HDWDashboard')
geterrmessage()
observeEvent(input$click,{
cat("\nyou clicked on a pie with pie slice data:", input$click)
})
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
?C3LineBarChart
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
geterrmessage()
geterrmessage()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
geterrmessage()
scaffoldWidget("C3StackedChart")
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
?actionButton
runApp('~/HDWDashboard')
devtools::install()
devtools::install()
library(C3)
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
set.seed(1000)
n <- 30
start_date = as.Date("2016-10-01")
dataset1 <- data.frame(
Time  = start_date + 1:n ,
data1 = runif(n, min = 0, max=10),
data2 = runif(n, min = 0, max=10),
data3 = runif(n, min = 0, max=10))
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
?list
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
?c
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
geterrmessage()
devtools::install()
library(C3)
runApp('~/HDWDashboard')
getSeries <- function(n = 100, drift = 0.1, walk = 4, scale=100){
y <- scale * cumsum(rnorm(n = n, mean = drift, sd = sqrt(walk)))
y <- round(y)
return(y + abs(min(y)))
}
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
devtools::install()
library(C3)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
shinyServer(function(input, output, session){
set.seed(1000)
n <- 30
start_date = as.Date("2016-10-01")
#sets up the message menu for the comments
output$messageMenu <- renderMenu({
msgs <- apply(messageData, 1, function(row) {
messageItem(from = row[["from"]], message = row[["message"]], time = row[["datetime"]])
})
dropdownMenu(type = "messages", .list = msgs)
})
#sets up the values for the tasks menu
output$tasks <- renderMenu({
nsgs <- apply(percent, 1, function(row){
taskItem(value = row[["percent"]], text = "Percent Complete", color = colorizer)
})
dropdownMenu(type = "tasks", .list = nsgs, badgeStatus = badgestats)
})
#outputs a graph based on the date inputs in the sidebar
output$dateRange <- renderPlot(ggplot(over_time_complete %>% filter(Date >= input$dates[1] & Date <= input$dates[2]), aes(Date, cumsum(count)))+scale_x_date(date_labels = '%Y-%m-%d',date_breaks = "1 week")+theme(axis.text.x = element_text(angle = 90, hjust = 1))+geom_line(aes(group=1),color="red",size=0.5)+geom_text(aes(label=cumsum(count)), check_overlap = TRUE,nudge_x = 0, nudge_y = 0)+labs(title = "Completed by Day TT", x = 'Date',y = 'Completed'))
value = reactive({
input$Update
round(runif(1,0,100),2)
})
output$gauge1 <- renderC3Gauge({
C3Gauge(value())
})
observeEvent(input$click,{
cat("\nyou clicked on a pie with pie slice data:", input$click)
})
output$chart12 <- renderC3StackedChart({
dataset1 <- data.frame(
Time  = start_date + 1:n ,
data1 = getSeries(n = n, drift = 0.3, walk = 3, scale = 30),
data2 = getSeries(n = n, drift = 0.1, walk = 4, scale = 20),
data3 = getSeries(n = n, drift = 0.2, walk = 3, scale = 30)
)
C3StackedChart(dataset = dataset1,
colors = list(data1 = "purple", data2 = "blue", data3 = "gray"),
types = list(data1 = "bar", data2 ="bar", data3 = "bar"),
groups = unlist("data1","data2","data3"))
})
observeEvent(input$update1, {
C3ChartProxy("chart12") %>% zoomChart("2016-10-05","2016-10-15")
})
output$lineBar <- renderC3LineBarChart({
C3LineBarChart(dataset = dataset, colors = colors)
})
})
set.seed(1000)
n <- 30
start_date = as.Date("2016-10-01")
#sets up the message menu for the comments
output$messageMenu <- renderMenu({
msgs <- apply(messageData, 1, function(row) {
messageItem(from = row[["from"]], message = row[["message"]], time = row[["datetime"]])
})
dropdownMenu(type = "messages", .list = msgs)
})
#sets up the values for the tasks menu
output$tasks <- renderMenu({
nsgs <- apply(percent, 1, function(row){
taskItem(value = row[["percent"]], text = "Percent Complete", color = colorizer)
})
dropdownMenu(type = "tasks", .list = nsgs, badgeStatus = badgestats)
})
#outputs a graph based on the date inputs in the sidebar
output$dateRange <- renderPlot(ggplot(over_time_complete %>% filter(Date >= input$dates[1] & Date <= input$dates[2]), aes(Date, cumsum(count)))+scale_x_date(date_labels = '%Y-%m-%d',date_breaks = "1 week")+theme(axis.text.x = element_text(angle = 90, hjust = 1))+geom_line(aes(group=1),color="red",size=0.5)+geom_text(aes(label=cumsum(count)), check_overlap = TRUE,nudge_x = 0, nudge_y = 0)+labs(title = "Completed by Day TT", x = 'Date',y = 'Completed'))
value = reactive({
input$Update
round(runif(1,0,100),2)
})
output$gauge1 <- renderC3Gauge({
C3Gauge(value())
})
observeEvent(input$click,{
cat("\nyou clicked on a pie with pie slice data:", input$click)
})
output$chart12 <- renderC3StackedChart({
dataset1 <- data.frame(
Time  = start_date + 1:n ,
data1 = getSeries(n = n, drift = 0.3, walk = 3, scale = 30),
data2 = getSeries(n = n, drift = 0.1, walk = 4, scale = 20),
data3 = getSeries(n = n, drift = 0.2, walk = 3, scale = 30)
)
C3StackedChart(dataset = dataset1,
colors = list(data1 = "purple", data2 = "blue", data3 = "gray"),
types = list(data1 = "bar", data2 ="bar", data3 = "bar"),
groups = unlist("data1","data2","data3"))
})
observeEvent(input$update1, {
C3ChartProxy("chart12") %>% zoomChart("2016-10-05","2016-10-15")
})
output$lineBar <- renderC3LineBarChart({
C3LineBarChart(dataset = dataset, colors = colors)
})
shinyServer(function(input, output, session){
set.seed(1000)
n <- 30
start_date = as.Date("2016-10-01")
#sets up the message menu for the comments
output$messageMenu <- renderMenu({
msgs <- apply(messageData, 1, function(row) {
messageItem(from = row[["from"]], message = row[["message"]], time = row[["datetime"]])
})
dropdownMenu(type = "messages", .list = msgs)
})
#sets up the values for the tasks menu
output$tasks <- renderMenu({
nsgs <- apply(percent, 1, function(row){
taskItem(value = row[["percent"]], text = "Percent Complete", color = colorizer)
})
dropdownMenu(type = "tasks", .list = nsgs, badgeStatus = badgestats)
})
#outputs a graph based on the date inputs in the sidebar
output$dateRange <- renderPlot(ggplot(over_time_complete %>% filter(Date >= input$dates[1] & Date <= input$dates[2]), aes(Date, cumsum(count)))+scale_x_date(date_labels = '%Y-%m-%d',date_breaks = "1 week")+theme(axis.text.x = element_text(angle = 90, hjust = 1))+geom_line(aes(group=1),color="red",size=0.5)+geom_text(aes(label=cumsum(count)), check_overlap = TRUE,nudge_x = 0, nudge_y = 0)+labs(title = "Completed by Day TT", x = 'Date',y = 'Completed'))
value = reactive({
input$Update
round(runif(1,0,100),2)
})
output$gauge1 <- renderC3Gauge({
C3Gauge(value())
})
observeEvent(input$click,{
cat("\nyou clicked on a pie with pie slice data:", input$click)
})
output$chart12 <- renderC3StackedChart({
dataset1 <- data.frame(
Time  = start_date + 1:n ,
data1 = getSeries(n = n, drift = 0.3, walk = 3, scale = 30),
data2 = getSeries(n = n, drift = 0.1, walk = 4, scale = 20),
data3 = getSeries(n = n, drift = 0.2, walk = 3, scale = 30)
)
C3StackedChart(dataset = dataset1,
colors = list(data1 = "purple", data2 = "blue", data3 = "gray"),
types = list(data1 = "bar", data2 ="bar", data3 = "bar"),
groups = unlist("data1","data2","data3"))
})
observeEvent(input$update1, {
C3ChartProxy("chart12") %>% zoomChart("2016-10-05","2016-10-15")
})
output$lineBar <- renderC3LineBarChart({
C3LineBarChart(dataset = dataset, colors = colors)
})
})
runApp('~/HDWDashboard')
?bsButton
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
geterrmessage()
runApp('~/HDWDashboard')
geterrmessage()
options(error = recover)
reach_full_in <- reachablity(krack_full, "in")
runApp('~/HDWDashboard')
1
2
3
4
0
options( error = continrue)
?options
options(error = continue)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
options(error = stop)
runApp('~/HDWDashboard')
runApp('~/HDWDashboard')
shinytest::recordTest("~/HDWDashboard")
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(bundesbank)
shinytest::recordTest("~/HDWDashboard")
source('~/HDWDashboard/Packages/install.R', echo=TRUE)
