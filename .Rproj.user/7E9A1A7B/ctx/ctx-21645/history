require("lazyeval")
out <- table %>% group_by_(df) %>% summarise(count = n())
return(out)
}
dataset <- data.frame(Time=c("2016-01-05","2016-01-12","2016-01-24"),
GREEN=c(0.1,0,0.2),
RED=c(0.9,1,0.8),
Total=c(320,210,190))
#creates data set for date graphing
over_time_complete <- grouping_totals("nisc_inspected_date")
over_time_complete <- over_time_complete %>% separate(nisc_inspected_date, c('Date','Time'),' ', extra = 'merge',)
over_time_complete <- over_time_complete %>% mutate(Date = as.Date(Date))
over_time_complete <- over_time_complete %>% ddply("Date",numcolwise(sum))
over_time_complete$Date <- as.Date(over_time_complete$Date, format = "%Y-%m-%d")
over_time_complete$count <- cumsum(over_time_complete$count)
IncompleteCount <- total - over_time_complete$count
over_time_complete <- over_time_complete[order(over_time_complete$Date),]
over_time_complete <- cbind(over_time_complete, IncompleteCount)
over_time_complete <- transform(over_time_complete, count = as.numeric(count))
over_time_complete <- transform(over_time_complete, IncompleteCount = as.numeric(IncompleteCount))
over_time_complete <- cbind(over_time_complete, total)
#creates badgestats and gives it a value
if(percent > 50){
badgestats <- "success"
colorizer <- "green"
}
if(50 > percent & percent > 20){
badgestats <- "warning"
colorizer <- 'yellow'
}else{
badgestats <- "danger"
colorizer <- "red"
}
getSeries <- function(n = 100, drift = 0.1, walk = 4, scale=100){
y <- scale * cumsum(rnorm(n = n, mean = drift, sd = sqrt(walk)))
y <- round(y)
return(y + abs(min(y)))
}
#drones_removed$nisc_inspected_date <- drones_removed %>% separate(nisc_inspected_date, c('Date','Time'),' ')
#datesVScomplete <- data.frame("Time" = drones_removed$nisc_inspected_date$Date, "Complete"=sum(drones_removed$A_TTComplete), "Incomplete"= sum(drones_removed$A_TTInComplete))
#datesVScomplete$Time <- as.Date(datesVScomplete$Time, format = "%Y-%m-%d")
#datesVScomplete <- datesVScomplete %>% drop_na
# DF <- data.frame(Value = 1:10, Status = TRUE, Name = LETTERS[1:10],
#                  Date =  seq(from = Sys.Date(), by = "days", length.out = 10),
#                  stringsAsFactors = FALSE)
DF <- readxl::read_excel("convertcsv (1).xlsx")
try(
DF <- readRDS("dataOut.Rds")
)
runApp()
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c('") )
raw.result <- GET("https://www.thebluealliance.com/api/v3/event/2019code/matches/simple?X-TBA-Auth-Key=T5l4si2D8i7FOrZc9hXhUlI3CRRU1elBsM6YflBdPKQfdCExpgT0SQHQ6SuWNkMq")
apiCall <- content(raw.result, "text")
apiCallFromJSON <- fromJSON(apiCall, flatten = TRUE)
apiCallDF <- as.data.frame(apiCallFromJSON)
rm(apiCall, apiCallFromJSON, raw.result)
apiCallDF <- apiCallDF %>%
select(-actual_time, -comp_level, -event_key, -key, -match_number, -predicted_time, -set_number, -time, -winning_alliance, -`alliances.blue.dq_team_keys`, -`alliances.blue.score`, -`alliances.blue.surrogate_team_keys`, -`alliances.red.dq_team_keys`, -`alliances.red.score`, -`alliances.red.surrogate_team_keys`)
apiCallDF <- concat.split(apiCallDF, 1, sep = ",")
apiCallDF <- concat.split(apiCallDF, 2, sep = ",")
apiCallDF <- apiCallDF %>%
select(-`alliances.blue.team_keys`, -`alliances.red.team_keys`)
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c('") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c("'frc'") )
#set up values for messageData
inspectedBy <- inputdata$nisc_inspected_by
inspectedComments <- inputdata$InspNotes
inspectedDate <- inputdata$nisc_inspected_date
#create messageData and remove N/A values
messageData <- data.frame("from" = inspectedBy, "message" = inspectedComments,"datetime" = inspectedDate)
messageData <- messageData %>% drop_na
#creates percent complete
total <- sum(inputdata$A_TTTotal)
complete <- sum(inputdata$A_TTComplete)
percent <- (complete/total)*100
percent <- data.frame(percent)
percent$percent <- round(percent$percent)
#formulas
grouping_totals <- function(df){
require("dplyr")
require("lazyeval")
out<-drones_removed %>% group_by_(df) %>% filter(A_TTComplete > 0) %>%
summarize(count = n())
return(out)
}
grouping_totals_incomplete <- function(df){
require("dplyr")
require("lazyeval")
out<-drones_removed %>% group_by_(df) %>% filter(A_TTInComplete > 0) %>%
summarize(count = n())
return(out)
}
count_by_type <- function(table,df){
require("dplyr")
require("lazyeval")
out <- table %>% group_by_(df) %>% summarise(count = n())
return(out)
}
dataset <- data.frame(Time=c("2016-01-05","2016-01-12","2016-01-24"),
GREEN=c(0.1,0,0.2),
RED=c(0.9,1,0.8),
Total=c(320,210,190))
#creates data set for date graphing
over_time_complete <- grouping_totals("nisc_inspected_date")
over_time_complete <- over_time_complete %>% separate(nisc_inspected_date, c('Date','Time'),' ', extra = 'merge',)
over_time_complete <- over_time_complete %>% mutate(Date = as.Date(Date))
over_time_complete <- over_time_complete %>% ddply("Date",numcolwise(sum))
over_time_complete$Date <- as.Date(over_time_complete$Date, format = "%Y-%m-%d")
over_time_complete$count <- cumsum(over_time_complete$count)
IncompleteCount <- total - over_time_complete$count
over_time_complete <- over_time_complete[order(over_time_complete$Date),]
over_time_complete <- cbind(over_time_complete, IncompleteCount)
over_time_complete <- transform(over_time_complete, count = as.numeric(count))
over_time_complete <- transform(over_time_complete, IncompleteCount = as.numeric(IncompleteCount))
over_time_complete <- cbind(over_time_complete, total)
#creates badgestats and gives it a value
if(percent > 50){
badgestats <- "success"
colorizer <- "green"
}
if(50 > percent & percent > 20){
badgestats <- "warning"
colorizer <- 'yellow'
}else{
badgestats <- "danger"
colorizer <- "red"
}
getSeries <- function(n = 100, drift = 0.1, walk = 4, scale=100){
y <- scale * cumsum(rnorm(n = n, mean = drift, sd = sqrt(walk)))
y <- round(y)
return(y + abs(min(y)))
}
#drones_removed$nisc_inspected_date <- drones_removed %>% separate(nisc_inspected_date, c('Date','Time'),' ')
#datesVScomplete <- data.frame("Time" = drones_removed$nisc_inspected_date$Date, "Complete"=sum(drones_removed$A_TTComplete), "Incomplete"= sum(drones_removed$A_TTInComplete))
#datesVScomplete$Time <- as.Date(datesVScomplete$Time, format = "%Y-%m-%d")
#datesVScomplete <- datesVScomplete %>% drop_na
# DF <- data.frame(Value = 1:10, Status = TRUE, Name = LETTERS[1:10],
#                  Date =  seq(from = Sys.Date(), by = "days", length.out = 10),
#                  stringsAsFactors = FALSE)
DF <- readxl::read_excel("convertcsv (1).xlsx")
try(
DF <- readRDS("dataOut.Rds")
)
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(frc") )
raw.result <- GET("https://www.thebluealliance.com/api/v3/event/2019code/matches/simple?X-TBA-Auth-Key=T5l4si2D8i7FOrZc9hXhUlI3CRRU1elBsM6YflBdPKQfdCExpgT0SQHQ6SuWNkMq")
apiCall <- content(raw.result, "text")
apiCallFromJSON <- fromJSON(apiCall, flatten = TRUE)
apiCallDF <- as.data.frame(apiCallFromJSON)
rm(apiCall, apiCallFromJSON, raw.result)
apiCallDF <- apiCallDF %>%
select(-actual_time, -comp_level, -event_key, -key, -match_number, -predicted_time, -set_number, -time, -winning_alliance, -`alliances.blue.dq_team_keys`, -`alliances.blue.score`, -`alliances.blue.surrogate_team_keys`, -`alliances.red.dq_team_keys`, -`alliances.red.score`, -`alliances.red.surrogate_team_keys`)
apiCallDF <- concat.split(apiCallDF, 1, sep = ",")
apiCallDF <- concat.split(apiCallDF, 2, sep = ",")
apiCallDF <- apiCallDF %>%
select(-`alliances.blue.team_keys`, -`alliances.red.team_keys`)
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(frc") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(\"frc") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(\"frc****\"") )
raw.result <- GET("https://www.thebluealliance.com/api/v3/event/2019code/matches/simple?X-TBA-Auth-Key=T5l4si2D8i7FOrZc9hXhUlI3CRRU1elBsM6YflBdPKQfdCExpgT0SQHQ6SuWNkMq")
apiCall <- content(raw.result, "text")
apiCallFromJSON <- fromJSON(apiCall, flatten = TRUE)
apiCallDF <- as.data.frame(apiCallFromJSON)
rm(apiCall, apiCallFromJSON, raw.result)
apiCallDF <- apiCallDF %>%
select(-actual_time, -comp_level, -event_key, -key, -match_number, -predicted_time, -set_number, -time, -winning_alliance, -`alliances.blue.dq_team_keys`, -`alliances.blue.score`, -`alliances.blue.surrogate_team_keys`, -`alliances.red.dq_team_keys`, -`alliances.red.score`, -`alliances.red.surrogate_team_keys`)
apiCallDF <- concat.split(apiCallDF, 1, sep = ",")
apiCallDF <- concat.split(apiCallDF, 2, sep = ",")
apiCallDF <- apiCallDF %>%
select(-`alliances.blue.team_keys`, -`alliances.red.team_keys`)
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(\"frc****\"") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(\"frc****\"") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(\"frc****\"") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(\"frc\"") )
raw.result <- GET("https://www.thebluealliance.com/api/v3/event/2019code/matches/simple?X-TBA-Auth-Key=T5l4si2D8i7FOrZc9hXhUlI3CRRU1elBsM6YflBdPKQfdCExpgT0SQHQ6SuWNkMq")
apiCall <- content(raw.result, "text")
apiCallFromJSON <- fromJSON(apiCall, flatten = TRUE)
apiCallDF <- as.data.frame(apiCallFromJSON)
rm(apiCall, apiCallFromJSON, raw.result)
apiCallDF <- apiCallDF %>%
select(-actual_time, -comp_level, -event_key, -key, -match_number, -predicted_time, -set_number, -time, -winning_alliance, -`alliances.blue.dq_team_keys`, -`alliances.blue.score`, -`alliances.blue.surrogate_team_keys`, -`alliances.red.dq_team_keys`, -`alliances.red.score`, -`alliances.red.surrogate_team_keys`)
apiCallDF <- concat.split(apiCallDF, 1, sep = ",")
apiCallDF <- concat.split(apiCallDF, 2, sep = ",")
apiCallDF <- apiCallDF %>%
select(-`alliances.blue.team_keys`, -`alliances.red.team_keys`)
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed("c(\"frc\"") )
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed(c("c(\"frc")", "\""))
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed(c("c(\"frc"", "\""))
raw.result <- GET("https://www.thebluealliance.com/api/v3/event/2019code/matches/simple?X-TBA-Auth-Key=T5l4si2D8i7FOrZc9hXhUlI3CRRU1elBsM6YflBdPKQfdCExpgT0SQHQ6SuWNkMq")
apiCall <- content(raw.result, "text")
apiCallFromJSON <- fromJSON(apiCall, flatten = TRUE)
apiCallDF <- as.data.frame(apiCallFromJSON)
rm(apiCall, apiCallFromJSON, raw.result)
apiCallDF <- apiCallDF %>%
select(-actual_time, -comp_level, -event_key, -key, -match_number, -predicted_time, -set_number, -time, -winning_alliance, -`alliances.blue.dq_team_keys`, -`alliances.blue.score`, -`alliances.blue.surrogate_team_keys`, -`alliances.red.dq_team_keys`, -`alliances.red.score`, -`alliances.red.surrogate_team_keys`)
apiCallDF <- concat.split(apiCallDF, 1, sep = ",")
apiCallDF <- concat.split(apiCallDF, 2, sep = ",")
apiCallDF <- apiCallDF %>%
select(-`alliances.blue.team_keys`, -`alliances.red.team_keys`)
?c
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed(c("c(\"frc"", "\"")))
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed(c("c(\"frc", "\"")))
raw.result <- GET("https://www.thebluealliance.com/api/v3/event/2019code/matches/simple?X-TBA-Auth-Key=T5l4si2D8i7FOrZc9hXhUlI3CRRU1elBsM6YflBdPKQfdCExpgT0SQHQ6SuWNkMq")
apiCall <- content(raw.result, "text")
apiCallFromJSON <- fromJSON(apiCall, flatten = TRUE)
apiCallDF <- as.data.frame(apiCallFromJSON)
rm(apiCall, apiCallFromJSON, raw.result)
apiCallDF <- apiCallDF %>%
select(-actual_time, -comp_level, -event_key, -key, -match_number, -predicted_time, -set_number, -time, -winning_alliance, -`alliances.blue.dq_team_keys`, -`alliances.blue.score`, -`alliances.blue.surrogate_team_keys`, -`alliances.red.dq_team_keys`, -`alliances.red.score`, -`alliances.red.surrogate_team_keys`)
apiCallDF <- concat.split(apiCallDF, 1, sep = ",")
apiCallDF <- concat.split(apiCallDF, 2, sep = ",")
apiCallDF <- apiCallDF %>%
select(-`alliances.blue.team_keys`, -`alliances.red.team_keys`)
apiCallDF$alliances.blue.team_keys_1 <- str_remove_all(apiCallDF$alliances.blue.team_keys_1, fixed(c("c(\"frc", "\"")))
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
?length
?length<0
?length<-
?length<-
?length<-\
?`length<-`
length(DF) <- nrows(apiCallDF)
length(DF) <- nrow(apiCallDF)
View(DF)
as.data.table(DF)[, lapply(.SD, `length<-`, nrow(apiCallDF)), by = x]
as.data.table(DF)[, lapply(.SD, `length<-`, nrow(apiCallDF)), by = `Team #`]
View(DF)
runApp()
View(DF)
as.data.table(DF)[, lapply(.SD, `length<-`, nrow(apiCallDF)), by = `Team #`]
View(DF)
DF <- as.data.table(DF)[, lapply(.SD, `length<-`, nrow(apiCallDF)), by = `Team #`]
View(DF)
?cbind
DF <- merge(DF$`Team #`, apiCallDF$`alliances.blue.team_keys_1`)
DF <- DF + merge(DF$`Team #`, apiCallDF$`alliances.blue.team_keys_1`)
runApp()
DF <- rbind(DF$`Team #`, apiCallDF$`alliances.blue.team_keys_1`)
View(DF)
runApp()
DF <- cbind(DF$`Team #`, apiCallDF$`alliances.blue.team_keys_1`)
View(DF)
runApp()
DF <- as.data.table(DF)[, lapply(.SD, `length<-`, nrow(apiCallDF)), by = `Team #`]
View(DF)
?extract
?replace
?replacerow
DF <- replacerow(DF, DF$`Team #` ,apiCallDF$`alliances.blue.team_keys_1`)
DF <- replacerow(DF, DF$`Team #` ,apiCallDF$`alliances.blue.team_keys_1`,0)
DF <- replacerow(DF, DF$`Team #` ,apiCallDF$`alliances.blue.team_keys_1`,1)
?replace
DF$`Team #` <- apiCallDF$`alliances.blue.team_keys_1`
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(DF)
runApp()
View(DF)
runApp()
runApp()
shiny::runApp()
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
source('~/2k20scouting/Packages/install.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
runApp()
shiny::runApp()
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install(c3)
devtools::install("c3")
devtools::install_github(ElementalTable\C3)
devtools::install_github(ElementalTable\c3)
devtools::install_github(`ElementalTable\c3`)
devtools::install_github("ElementalTable\\c3")
?devtools::install_github
devtools::install_github("ElementalTable\c3")
library(devtools)
devtools::install_github("ElementalTable\c3")
library(devtools)
library(devtools)
devtools::install_github("ElementalTable\c3")
devtools::install_github("ElementalTable/c3")
devtools::install_github("ElementalTable/C3")
install.packages("devtools")
install.packages("devtools")
install.packages("rtools")
install.packages("Rtools")
install.packages("devtools")
install.packages("devtools")
?require()
install.packages("c3")
require(devtools)
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
library(devtools)
runApp()
devtools::install("c3")
library(c3)
devtools::install("https://github.com/ElementalTable/C3")
devtools::install(https://github.com/ElementalTable/C3)
?devtools::install_bioc()
devtools::install_github("https://github.com/ElementalTable/C3")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("c3")
runApp()
runApp()
runApp()
runApp()
devtools::install("c3")
devtools::install("C3")
devtools::install("c3")
devtools::install_github("devtools::install_github("https://github.com/ElementalTable/C3")")
devtools::install_github("https://github.com/ElementalTable/C3")
runApp()
devtools::install_github("https://github.com/ElementalTable/C3")
shiny::runApp()
runApp()
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
library(devtools)
runApp()
exit
quit
q()
q()
quit()
runApp()
source('~/2k20scouting/Packages/install.R', echo=TRUE)
