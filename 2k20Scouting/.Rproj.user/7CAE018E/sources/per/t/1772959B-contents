shinyServer(function(input, output, session){

  set.seed(1000)
  
  n <- 30
  
  start_date = as.Date("2016-10-01")
  
  idataset1 <- data.frame(
    Time  = start_date + 1:n ,
    data1 = getSeries(n = n, drift = 0.3, walk = 3, scale = 30),
    data2 = getSeries(n = n, drift = 0.1, walk = 4, scale = 20),
    data3 = getSeries(n = n, drift = 0.2, walk = 3, scale = 30)
  )
  
  
  #sets up the message menu for the comments
  output$messageMenu <- renderMenu({
    msgs <- apply(messageData, 1, function(row) {
      messageItem(from = row[["from"]], message = row[["message"]], time = row[["datetime"]])
    })
    dropdownMenu(type = "messages", .list = msgs)
  })
  #sets up the values for the tasks menu
  output$tasks <- renderMenu({
    nsgs <- apply(percent, 1, function(row){
      taskItem(value = row[["percent"]], text = "Percent Complete", color = colorizer)
    })
    dropdownMenu(type = "tasks", .list = nsgs, badgeStatus = badgestats)
  })
  #outputs a graph based on the date inputs in the sidebar
  output$dateRange <- renderPlot(ggplot(over_time_complete %>% filter(Date >= input$dates[1] & Date <= input$dates[2]), aes(Date, cumsum(count)))+scale_x_date(date_labels = '%Y-%m-%d',date_breaks = "1 week")+theme(axis.text.x = element_text(angle = 90, hjust = 1))+geom_line(aes(group=1),color="red",size=0.5)+geom_text(aes(label=cumsum(count)), check_overlap = TRUE,nudge_x = 0, nudge_y = 0)+labs(title = "Completed by Day TT", x = 'Date',y = 'Completed'))

   value = reactive({
     input$Update
     round(runif(1,0,100),2)
   })
  output$gauge1 <- renderC3Gauge({
    C3Gauge(value())
  })

   observeEvent(input$click,{
     cat("\nyou clicked on a pie with pie slice data:", input$click)
   })
  output$lineBar <- renderC3LineBarChart({
    C3LineBarChart(dataset = datesVScomplete)
  })

  output$kpi1 <- renderC3Gauge({
    C3Gauge(message = 5,iTotal = 10)
  })
  
  output$kpi2 <- renderC3Gauge({
    
  })
  
  output$kpi3 <- renderC3Gauge({
    
  })
  
  output$overviewChart <- renderC3StackedChart({
    
  })
  
  output$pie1 <- renderC3pie({
    
  })
  
  output$pie2 <- renderC3pie({
    
  })
  
  output$pie3 <- renderC3pie({
    
  })
  
  output$pie4 <- renderC3pie({
    
  })
  
   output$stackedChart1 <- renderC3StackedChart({
     C3StackedChart(idataset = over_time_complete
                    ,icolors = list(count = "purple", IncompleteCount = "blue")
                    ,types = list(count = "bar", IncompleteCount = "bar")
                    ,groups = c("count","total")
                    )
     })
  observeEvent(input$update1, {
    if(input$update1 == TRUE){
    C3ChartProxy("stackedChart1") %>% zoomChart(input$dates[1],input$dates[2])
    }else{
      C3ChartProxy("stackedChart1") %>% zoomChart("2018-10-24","2019-04-05")
    }
  })
  
  observeEvent(input$update3,{
  if(input$update3 == TRUE){
    C3ChartProxy("stackedChart1") %>% transformTo("line")
  }else{
    C3ChartProxy("stackedChart1") %>% transformTo("area")
  }})
  
  observeEvent(input$update4,{
    if(input$update4 == TRUE){
      C3ChartProxy("stackedChart1") %>% setGroups(c("count", "total"))
    }else{
      C3ChartProxy("stackedChart1") %>% setGroups(c("total","IncompleteCount"))
    }
  })
  
  observeEvent(input$update_type,{
    info = list(type = input$type, series = input$dataset)
    C3ChartProxy("stackedChart1") %>% setTypes(info)
  })
  
})

