DF <- merge(DF$`Team #`, apiCallDF$`alliances.blue.team_keys_1`)
DF <- DF + merge(DF$`Team #`, apiCallDF$`alliances.blue.team_keys_1`)
runApp()
DF <- rbind(DF$`Team #`, apiCallDF$`alliances.blue.team_keys_1`)
View(DF)
runApp()
DF <- cbind(DF$`Team #`, apiCallDF$`alliances.blue.team_keys_1`)
View(DF)
runApp()
DF <- as.data.table(DF)[, lapply(.SD, `length<-`, nrow(apiCallDF)), by = `Team #`]
View(DF)
?extract
?replace
?replacerow
DF <- replacerow(DF, DF$`Team #` ,apiCallDF$`alliances.blue.team_keys_1`)
DF <- replacerow(DF, DF$`Team #` ,apiCallDF$`alliances.blue.team_keys_1`,0)
DF <- replacerow(DF, DF$`Team #` ,apiCallDF$`alliances.blue.team_keys_1`,1)
?replace
DF$`Team #` <- apiCallDF$`alliances.blue.team_keys_1`
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(DF)
runApp()
View(DF)
runApp()
runApp()
shiny::runApp()
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
source('~/2k20scouting/Packages/install.R', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
runApp()
shiny::runApp()
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install(c3)
devtools::install("c3")
devtools::install_github(ElementalTable\C3)
devtools::install_github(ElementalTable\c3)
devtools::install_github(`ElementalTable\c3`)
devtools::install_github("ElementalTable\\c3")
?devtools::install_github
devtools::install_github("ElementalTable\c3")
library(devtools)
devtools::install_github("ElementalTable\c3")
library(devtools)
library(devtools)
devtools::install_github("ElementalTable\c3")
devtools::install_github("ElementalTable/c3")
devtools::install_github("ElementalTable/C3")
install.packages("devtools")
install.packages("devtools")
install.packages("rtools")
install.packages("Rtools")
install.packages("devtools")
install.packages("devtools")
?require()
install.packages("c3")
require(devtools)
#call libraries
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(devtools)
library(C3)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
library(devtools)
runApp()
devtools::install("c3")
library(c3)
devtools::install("https://github.com/ElementalTable/C3")
devtools::install(https://github.com/ElementalTable/C3)
?devtools::install_bioc()
devtools::install_github("https://github.com/ElementalTable/C3")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("c3")
runApp()
runApp()
runApp()
runApp()
devtools::install("c3")
devtools::install("C3")
devtools::install("c3")
devtools::install_github("devtools::install_github("https://github.com/ElementalTable/C3")")
devtools::install_github("https://github.com/ElementalTable/C3")
runApp()
devtools::install_github("https://github.com/ElementalTable/C3")
shiny::runApp()
runApp()
rm(apiCallDF, dataOut, dataset, dataset1, datesVScomplete, DF, drones_removed, inputdata, messageData, over_time_complete, percent, sidebar)
runApp()
runApp()
rm(apiCallDF)
runApp()
runApp()
runApp()
runApp()
runApp()
?save
saveWidget
?saveWidget
?save_all
install.packages("rjson")
library(rjson)
?rjson
install.packages("write_json")
library(write_json)
?write_json
write_json(finalDF, file.path(getwd(), sprintf("%s.rds", "dataOutBlue2")))
runApp()
runApp()
runApp()
runApp()
runApp()
rm(apiCallDF, apiCallFromJSON, raw.result)
runApp()
runApp()
runApp()
detach("package:rjson", unload = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
dataBlue1 <- read_json(paste(getwd(),"/dataOutBlue1.json", sep = ""), simplifyVector = TRUE)
dataBlue2 <- read_json(paste(getwd(),"/dataOutBlue2.json", sep = ""), simplifyVector = TRUE)
dataBlue3 <- read_json(paste(getwd(),"/dataOutBlue3.json", sep = ""), simplifyVector = TRUE)
dataRed1 <- read_json(paste(getwd(),"/dataOutRed1.json", sep = ""), simplifyVector = TRUE)
dataRed2 <- read_json(paste(getwd(),"/dataOutRed2.json", sep = ""), simplifyVector = TRUE)
dataRed3 <- read_json(paste(getwd(),"/dataOutRed3.json", sep = ""), simplifyVector = TRUE)
View(dataBlue1)
View(dataBlue1)
?for
?for()
?for{}
?for
View(dataBlue1)
View(dataBlue1)
1$dataBlue1
"Team #"$dataBlue1
dataBlue1$`Team #`
for(dataBlue1$`Team #` in dataBlue1)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(readxl)
library(plyr)
library(tibble)
library(dplyr)
library(haven)
library(tidyr)
library(lazyeval)
library(tidyverse)
library(cmna)
library(htmlwidgets)
library(plotly)
library(ggplot2)
library(shinyBS)
library(rhandsontable)
library(jsonlite)
library(httr)
library(lubridate)
library(splitstackshape)
library(stringr)
library(`data.table`)
library(devtools)
library(C3)
for(dataBlue1$`Team #` in dataBlue1){}
for(dataBlue1[,`Team #`] in dataBlue1){}
dataBlue1 <- data.frame(dataBlue1)
for(dataBlue1$Team.. in dataBlue1){}
for(`dataBlue1$Team..`){}
for `dataBlue1$Team..` {}
for (`dataBlue1$Team..`) {}
for (dataBlue1$Team.. in dataBlue1) {}
dataBlue1$Team..
?type_convert
for (i in dataBlue1$Team..) {
write_json(paste(getwd(),"/team****.json", sep = ""))
}
runApp()
for (i in dataBlue1$Team..) {
write_json(dataBlue1,paste(getwd(),"/team$$$$.json", sep = ""))
}
write_json(dataBlue1,paste(getwd(),"/team`i`.json", sep = ""))
for (i in dataBlue1$Team..) {
write_json(dataBlue1,paste(getwd(),"/team`i`.json", sep = ""))
}
for (i in dataBlue1$Team..) {
write_json(dataBlue1,paste(getwd(),"/team", i ,".json", sep = ""))
}
for (i in dataBlue1$Team..) {
if(dataBlue1$Team..! i){
dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
write_json(dataBlue1,paste(getwd(),"/team", i ,".json", sep = ""))
}
if(dataBlue1$Team..! i){
dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
if(dataBlue1$Team..! i){
dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
if(dataBlue1$Team.. != i){
dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
for (i in dataBlue1$Team..) {
if(dataBlue1$Team.. != i){
dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
write_json(dataBlue1,paste(getwd(),"/team", i ,".json", sep = ""))
}
dataBlue1 <- data.frame(dataBlue1)
for (i in dataBlue1$Team..) {
if(dataBlue1$Team.. != i){
teamValues<-dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
write_json(teamValues,paste(getwd(),"/team", i ,".json", sep = ""))
}
teamValues<-dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
for (i in dataBlue1$Team..) {
if(dataBlue1$Team.. != i){
paste("teamValues", i, sep = "") <-dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
write_json(teamValues,paste(getwd(),"/team", i ,".json", sep = ""))
}
paste("teamValues", i, sep = "")
print
?print
for (i in dataBlue1$Team..) {
if(dataBlue1$Team.. != i){
dataBlue1<- dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
write_json(teamValues,paste(getwd(),"/team", i ,".json", sep = ""))
}
for (i in dataBlue1$Team..) {
if(dataBlue1$Team.. != i){
dataBlue1<- dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
write_json(dataBlue1,paste(getwd(),"/team", i ,".json", sep = ""))
}
for (i in dataBlue1$Team..) {
if(dataBlue1$Team.. != i){
dataBlue1<- dataBlue1 %>% rm(Team.., Match.., They.Did.Well, They.Struggled.With, They.Cant.Do, Fouls, Tech.Fouls, Yellow.Card, Red.Card, Disabled, Flipped.Over, Inner.Port, Outer.Port, Lower.Port, Assisted.Climb, Center.Climb, Leveling.Climb, Trench.Run, Control.Panel)
}
write_json(dataBlue1,paste(getwd(),"/team", i ,".json", sep = ""))
}
for (i in dataBlue1$Team..) {
write_json(dataBlue1,paste(getwd(),"/team", i ,".json", sep = ""))
}
dataBlue1 <- data.frame(dataBlue1)
for (i in dataBlue1$Team..) {
write_json(dataBlue1,paste(getwd(),"/team", i ,".json", sep = ""))
}
dataBlue1 <- read_json(paste(getwd(),"/dataOutBlue1.json", sep = ""), simplifyVector = TRUE)
dataBlue2 <- read_json(paste(getwd(),"/dataOutBlue2.json", sep = ""), simplifyVector = TRUE)
dataBlue3 <- read_json(paste(getwd(),"/dataOutBlue3.json", sep = ""), simplifyVector = TRUE)
dataRed1 <- read_json(paste(getwd(),"/dataOutRed1.json", sep = ""), simplifyVector = TRUE)
dataRed2 <- read_json(paste(getwd(),"/dataOutRed2.json", sep = ""), simplifyVector = TRUE)
dataRed3 <- read_json(paste(getwd(),"/dataOutRed3.json", sep = ""), simplifyVector = TRUE)
dataBlue1 <- data.frame(dataBlue1)
for (i in dataBlue1$Team..) {
write_json(dataBlue1,paste(getwd(),"/team", i ,".json", sep = ""))
}
paste("team", i, sep = "")
paste("team", i, sep = "") <- dataBlue1[grep(i,dataBlue1$Team..),]
dataSubset <- dataBlue1[grep(i,dataBlue1$Team..),]
for (i in dataBlue1$Team..) {
dataSubset <- dataBlue1[grep(i,dataBlue1$Team..),]
write_json(dataSubset,paste(getwd(),"/team", i ,".json", sep = ""))
}
dataBlue2 <- data.frame(dataBlue2)
for (i in dataBlue1$Team..) {
dataSubset <- dataBlue1[grep(i,dataBlue1$Team..),]
write_json(dataSubset,paste(getwd(),"/team", i ,".json", sep = ""))
}
dataBlue2 <- data.frame(dataBlue2)
for (i in dataBlue2$Team..) {
dataSubset2 <- dataBlue2[grep(i,dataBlue2$Team..),]
write_json(dataSubset2, paste(getwd(), "/team", i, ".json", sep = ""))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dataRed2)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
try(
DF1 <- read_json(paste(getwd(),"/dataOutBlue1.json", sep = ""), simplifyVector = TRUE)
)
try(
DF1 <- read_json(paste(getwd(),"/dataOutBlue1.json", sep = ""), simplifyVector = TRUE)
)
try(
DF2 <- read_json(paste(getwd(),"/dataOutBlue2.json", sep = ""), simplifyVector = TRUE)
)
if (!is.null(DF2))
runApp()
rm(DF1, DF2)
runApp()
rm(apiCallDF, dataBlue1, dataBlue2, dataBlue3, dataRed1, dataRed2, dataRed3)
rm(dataSubset, dataSubset2)
runApp()
runApp()
runApp()
DF2 <- readxl::read_excel("convertcsv (1).xlsx")
DF2 <- readxl::read_excel("convertcsv (1).xlsx")try(dataBlue1 <- read_json(paste(getwd(),"/dataOutBlue1.json", sep = ""), simplifyVector = TRUE))
DF2 <- readxl::read_excel("convertcsv (1).xlsx")try(dataBlue2 <- read_json(paste(getwd(),"/dataOutBlue2.json", sep = ""), simplifyVector = TRUE))
DF2 <- readxl::read_excel("convertcsv (1).xlsx")try(dataBlue3 <- read_json(paste(getwd(),"/dataOutBlue3.json", sep = ""), simplifyVector = TRUE))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
scoutNum <- input$scoutNum
runApp()
runApp()
runApp()
runApp()
observeEvent(input$scoutNum,{
scoutNum <- input$scoutNum
})
scoutNum <- input$scoutNum
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#   }else{
#     C3ChartProxy("stackedChart1") %>% setGroups(c("total","IncompleteCount"))
#   }
# })
#
# observeEvent(input$update_type,{
#   info = list(type = input$type, series = input$dataset)
#   C3ChartProxy("stackedChart1") %>% setTypes(info)
# })
#
values <- reactiveValues()
runApp()
runApp()
runApp()
save <- "save1"
runApp()
runApp()
runApp()
?observe
runApp()
runApp()
runApp()
runApp()
runApp()
?observeEvent
runApp()
runApp()
runApp()
runApp()
runApp()
try(
DF6 <- read_json(paste(getwd(),"/dataOutRed3.json", sep = ""), simplifyVector = TRUE)
)
runApp()
